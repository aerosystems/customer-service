// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"firebase.google.com/go/v4/auth"
	"github.com/aerosystems/common-service/clients/gcpclient"
	"github.com/aerosystems/common-service/clients/gormclient"
	"github.com/aerosystems/common-service/logger"
	"github.com/aerosystems/customer-service/internal/adapters"
	"github.com/aerosystems/customer-service/internal/ports/http"
	"github.com/aerosystems/customer-service/internal/usecases"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

// Injectors from wire.go:

//go:generate wire
func InitServerApp() *Server {
	logger := ProvideLogger()
	logrusLogger := ProvideLogrusLogger(logger)
	config := ProvideConfig()
	db := ProvideGORMPostgres(logrusLogger, config)
	customerPostgresRepo := ProvideCustomerPostgresRepo(db)
	subscriptionAdapter := ProvideSubscriptionAdapter(config)
	projectAdapter := ProvideProjectAdapter(config)
	checkmailAdapter := ProvideCheckmailAdapter(config)
	client := ProvideFirebaseAuthClient(config)
	firebaseAuthAdapter := ProvideFirebaseAuthAdapter(client)
	customerUsecase := ProvideCustomerUsecase(logrusLogger, customerPostgresRepo, subscriptionAdapter, projectAdapter, checkmailAdapter, firebaseAuthAdapter)
	handler := ProvideHandler(logrusLogger, customerUsecase)
	server := ProvideHTTPServer(config, logrusLogger, handler)
	appServer := ProvideServerApp(logrusLogger, config, server)
	return appServer
}

//go:generate wire
func InitMigrationApp() *Migration {
	logger := ProvideLogger()
	logrusLogger := ProvideLogrusLogger(logger)
	config := ProvideConfig()
	db := ProvideGORMPostgres(logrusLogger, config)
	migration := ProvideMigration(db)
	appMigration := ProvideMigrationApp(logrusLogger, config, migration)
	return appMigration
}

func ProvideServerApp(log *logrus.Logger, cfg *Config, httpServer *HTTPServer.Server) *Server {
	server := NewServer(log, cfg, httpServer)
	return server
}

func ProvideMigrationApp(log *logrus.Logger, cfg *Config, migration *adapters.Migration) *Migration {
	appMigration := NewAppMigration(log, cfg, migration)
	return appMigration
}

func ProvideMigration(db *gorm.DB) *adapters.Migration {
	migration := adapters.NewMigration(db)
	return migration
}

func ProvideLogger() *logger.Logger {
	loggerLogger := logger.NewLogger()
	return loggerLogger
}

func ProvideConfig() *Config {
	config := NewConfig()
	return config
}

func ProvideCustomerUsecase(log *logrus.Logger, customerRepo usecases.CustomerRepository, subscriptionAdapter usecases.SubscriptionAdapter, projectAdapter usecases.ProjectAdapter, checkmailAdapter usecases.CheckmailAdapter, firebaseAuthAdapter usecases.FirebaseAuthAdapter) *usecases.CustomerUsecase {
	customerUsecase := usecases.NewCustomerUsecase(log, customerRepo, subscriptionAdapter, projectAdapter, checkmailAdapter, firebaseAuthAdapter)
	return customerUsecase
}

func ProvideFirebaseAuthAdapter(client *auth.Client) *adapters.FirebaseAuthAdapter {
	firebaseAuthAdapter := adapters.NewFirebaseAuthAdapter(client)
	return firebaseAuthAdapter
}

func ProvideCustomerPostgresRepo(db *gorm.DB) *adapters.CustomerPostgresRepo {
	customerPostgresRepo := adapters.NewCustomerPostgresRepo(db)
	return customerPostgresRepo
}

func ProvideHandler(log *logrus.Logger, customerUsecase HTTPServer.CustomerUsecase) *HTTPServer.Handler {
	handler := HTTPServer.NewHandler(customerUsecase)
	return handler
}

// wire.go:

func ProvideSubscriptionAdapter(cfg *Config) *adapters.SubscriptionAdapter {
	subscriptionAdapter, err := adapters.NewSubscriptionAdapter(&cfg.SubscriptionServiceGRPC)
	if err != nil {
		panic(err)
	}
	return subscriptionAdapter
}

func ProvideProjectAdapter(cfg *Config) *adapters.ProjectAdapter {
	projectAdapter, err := adapters.NewProjectAdapter(&cfg.ProjectServiceGRPC)
	if err != nil {
		panic(err)
	}
	return projectAdapter
}

func ProvideCheckmailAdapter(cfg *Config) *adapters.CheckmailAdapter {
	checkmailAdapter, err := adapters.NewCheckmailAdapter(&cfg.CheckmailServiceGRPC)
	if err != nil {
		panic(err)
	}
	return checkmailAdapter
}

func ProvideLogrusLogger(log *logger.Logger) *logrus.Logger {
	return log.Logger
}

func ProvideGORMPostgres(log *logrus.Logger, cfg *Config) *gorm.DB {
	db := gormclient.NewPostgresDB(log, &cfg.Postgres)
	return db
}

func ProvideFirebaseAuthClient(cfg *Config) *auth.Client {
	client, err := gcpclient.NewFirebaseClient(&cfg.Firebase)
	if err != nil {
		panic(err)
	}
	return client
}

func ProvideHTTPServer(cfg *Config, log *logrus.Logger, handler *HTTPServer.Handler) *HTTPServer.Server {
	return HTTPServer.NewHTTPServer(&cfg.HTTPServer, cfg.Debug, log, handler)
}
