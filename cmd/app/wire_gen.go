// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/aerosystems/customer-service/internal/config"
	"github.com/aerosystems/customer-service/internal/http"
	"github.com/aerosystems/customer-service/internal/infrastructure/rest"
	"github.com/aerosystems/customer-service/internal/infrastructure/rpc"
	"github.com/aerosystems/customer-service/internal/models"
	"github.com/aerosystems/customer-service/internal/repository/pg"
	"github.com/aerosystems/customer-service/internal/repository/rpc"
	"github.com/aerosystems/customer-service/internal/usecases"
	"github.com/aerosystems/customer-service/pkg/gorm_postgres"
	"github.com/aerosystems/customer-service/pkg/logger"
	"github.com/aerosystems/customer-service/pkg/oauth"
	"github.com/aerosystems/customer-service/pkg/rpc_client"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

// Injectors from wire.go:

//go:generate wire
func InitApp() *App {
	logger := ProvideLogger()
	logrusLogger := ProvideLogrusLogger(logger)
	config := ProvideConfig()
	baseHandler := ProvideBaseHandler(logrusLogger, config)
	entry := ProvideLogrusEntry(logger)
	db := ProvideGormPostgres(entry, config)
	customerRepo := ProvideCustomerRepo(db)
	projectRepo := ProvideProjectRepo(config)
	subsRepo := ProvideSubsRepo(config)
	customerUsecase := ProvideCustomerUsecase(customerRepo, projectRepo, subsRepo)
	customerHandler := ProvideCustomerHandler(baseHandler, customerUsecase)
	accessTokenService := ProvideAccessTokenService(config)
	server := ProvideHTTPServer(logrusLogger, config, customerHandler, accessTokenService)
	rpcServerServer := ProvideRPCServer(logrusLogger, customerUsecase)
	app := ProvideApp(logrusLogger, config, server, rpcServerServer)
	return app
}

func ProvideApp(log *logrus.Logger, cfg *config.Config, httpServer *HTTPServer.Server, rpcServer *RPCServer.Server) *App {
	app := NewApp(log, cfg, httpServer, rpcServer)
	return app
}

func ProvideLogger() *logger.Logger {
	loggerLogger := logger.NewLogger()
	return loggerLogger
}

func ProvideConfig() *config.Config {
	configConfig := config.NewConfig()
	return configConfig
}

func ProvideHTTPServer(log *logrus.Logger, cfg *config.Config, customerHandler *rest.CustomerHandler, tokenService HTTPServer.TokenService) *HTTPServer.Server {
	server := HTTPServer.NewServer(log, customerHandler, tokenService)
	return server
}

func ProvideRPCServer(log *logrus.Logger, customerUsecase RPCServer.CustomerUsecase) *RPCServer.Server {
	server := RPCServer.NewServer(log, customerUsecase)
	return server
}

func ProvideCustomerHandler(baseHandler *rest.BaseHandler, customerUsecase rest.CustomerUsecase) *rest.CustomerHandler {
	customerHandler := rest.NewCustomerHandler(baseHandler, customerUsecase)
	return customerHandler
}

func ProvideCustomerUsecase(customerRepo usecases.CustomerRepository, projectRepo usecases.ProjectRepository, subsRepository usecases.SubsRepository) *usecases.CustomerUsecase {
	customerUsecase := usecases.NewCustomerUsecase(customerRepo, projectRepo, subsRepository)
	return customerUsecase
}

func ProvideCustomerRepo(db *gorm.DB) *pg.CustomerRepo {
	customerRepo := pg.NewCustomerRepo(db)
	return customerRepo
}

// wire.go:

func ProvideLogrusEntry(log *logger.Logger) *logrus.Entry {
	return logrus.NewEntry(log.Logger)
}

func ProvideLogrusLogger(log *logger.Logger) *logrus.Logger {
	return log.Logger
}

func ProvideGormPostgres(e *logrus.Entry, cfg *config.Config) *gorm.DB {
	db := GormPostgres.NewClient(e, cfg.PostgresDSN)
	if err := db.AutoMigrate(&models.Customer{}); err != nil {
		panic(err)
	}
	return db
}

func ProvideBaseHandler(log *logrus.Logger, cfg *config.Config) *rest.BaseHandler {
	return rest.NewBaseHandler(log, cfg.Mode)
}

func ProvideSubsRepo(cfg *config.Config) *rpcRepo.SubsRepo {
	rpcClient := RPCClient.NewClient("tcp", cfg.SubsServiceRPCAddress)
	return rpcRepo.NewSubsRepo(rpcClient)
}

func ProvideProjectRepo(cfg *config.Config) *rpcRepo.ProjectRepo {
	rpcClient := RPCClient.NewClient("tcp", cfg.ProjectServiceRPCAddress)
	return rpcRepo.NewProjectRepo(rpcClient)
}

func ProvideAccessTokenService(cfg *config.Config) *OAuthService.AccessTokenService {
	return OAuthService.NewAccessTokenService(cfg.AccessSecret)
}
