// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"cloud.google.com/go/firestore"
	"context"
	"github.com/aerosystems/customer-service/internal/config"
	"github.com/aerosystems/customer-service/internal/infrastructure/adapters/rpc"
	"github.com/aerosystems/customer-service/internal/infrastructure/repository/fire"
	"github.com/aerosystems/customer-service/internal/presenters/consumer"
	"github.com/aerosystems/customer-service/internal/usecases"
	"github.com/aerosystems/customer-service/pkg/logger"
	"github.com/aerosystems/customer-service/pkg/pubsub"
	"github.com/aerosystems/customer-service/pkg/rpc_client"
	"github.com/sirupsen/logrus"
)

// Injectors from wire.go:

//go:generate wire
func InitApp() *App {
	logger := ProvideLogger()
	logrusLogger := ProvideLogrusLogger(logger)
	config := ProvideConfig()
	client := ProvidePubSubClient(config)
	firestoreClient := ProvideFirestoreClient(config)
	customerRepo := ProvideFireCustomerRepo(firestoreClient)
	projectRepo := ProvideProjectRepo(config)
	subsRepo := ProvideSubsRepo(config)
	customerUsecase := ProvideCustomerUsecase(customerRepo, projectRepo, subsRepo)
	authSubscription := ProvideAuthConsumer(logrusLogger, config, client, customerUsecase)
	app := ProvideApp(logrusLogger, config, authSubscription)
	return app
}

func ProvideApp(log *logrus.Logger, cfg *config.Config, authConsumer *consumer.AuthSubscription) *App {
	app := NewApp(log, cfg, authConsumer)
	return app
}

func ProvideLogger() *logger.Logger {
	loggerLogger := logger.NewLogger()
	return loggerLogger
}

func ProvideConfig() *config.Config {
	configConfig := config.NewConfig()
	return configConfig
}

func ProvideCustomerUsecase(customerRepo usecases.CustomerRepository, projectRepo usecases.ProjectRepository, subsRepository usecases.SubsRepository) *usecases.CustomerUsecase {
	customerUsecase := usecases.NewCustomerUsecase(customerRepo, projectRepo, subsRepository)
	return customerUsecase
}

func ProvideFireCustomerRepo(client *firestore.Client) *fire.CustomerRepo {
	customerRepo := fire.NewCustomerRepo(client)
	return customerRepo
}

// wire.go:

func ProvideLogrusLogger(log *logger.Logger) *logrus.Logger {
	return log.Logger
}

func ProvideSubsRepo(cfg *config.Config) *RpcRepo.SubsRepo {
	rpcClient := RpcClient.NewClient("tcp", cfg.SubsServiceRPCAddress)
	return RpcRepo.NewSubsRepo(rpcClient)
}

func ProvideProjectRepo(cfg *config.Config) *RpcRepo.ProjectRepo {
	rpcClient := RpcClient.NewClient("tcp", cfg.ProjectServiceRpcAddress)
	return RpcRepo.NewProjectRepo(rpcClient)
}

func ProvideFirestoreClient(cfg *config.Config) *firestore.Client {
	ctx := context.Background()
	client, err := firestore.NewClient(ctx, cfg.GcpProjectId)
	if err != nil {
		panic(err)
	}
	return client
}

func ProvideAuthConsumer(log *logrus.Logger, cfg *config.Config, client *PubSub.Client, customerUsecase consumer.CustomerUsecase) *consumer.AuthSubscription {
	return consumer.NewAuthSubscription(log, client, cfg.AuthTopicId, cfg.AuthSubName, customerUsecase)
}

func ProvidePubSubClient(cfg *config.Config) *PubSub.Client {
	client, err := PubSub.NewClientWithAuth(cfg.GoogleApplicationCredentials)
	if err != nil {
		panic(err)
	}
	return client
}
