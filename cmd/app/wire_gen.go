// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"cloud.google.com/go/firestore"
	"context"
	"github.com/aerosystems/customer-service/internal/config"
	"github.com/aerosystems/customer-service/internal/infrastructure/http"
	"github.com/aerosystems/customer-service/internal/infrastructure/http/handlers"
	"github.com/aerosystems/customer-service/internal/infrastructure/rpc"
	"github.com/aerosystems/customer-service/internal/repository/fire"
	"github.com/aerosystems/customer-service/internal/repository/pg"
	"github.com/aerosystems/customer-service/internal/repository/rpc"
	"github.com/aerosystems/customer-service/internal/usecases"
	"github.com/aerosystems/customer-service/pkg/gorm_postgres"
	"github.com/aerosystems/customer-service/pkg/logger"
	"github.com/aerosystems/customer-service/pkg/rpc_client"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

// Injectors from wire.go:

//go:generate wire
func InitApp() *App {
	logger := ProvideLogger()
	logrusLogger := ProvideLogrusLogger(logger)
	config := ProvideConfig()
	baseHandler := ProvideBaseHandler(logrusLogger, config)
	client := ProvideFirestoreClient(config)
	customerRepo := ProvideFireCustomerRepo(client)
	projectRepo := ProvideProjectRepo(config)
	subsRepo := ProvideSubsRepo(config)
	customerUsecase := ProvideCustomerUsecase(customerRepo, projectRepo, subsRepo)
	customerHandler := ProvideCustomerHandler(baseHandler, customerUsecase)
	server := ProvideHttpServer(logrusLogger, config, customerHandler)
	rpcServerServer := ProvideRpcServer(logrusLogger, customerUsecase)
	app := ProvideApp(logrusLogger, config, server, rpcServerServer)
	return app
}

func ProvideApp(log *logrus.Logger, cfg *config.Config, httpServer *HttpServer.Server, rpcServer *RpcServer.Server) *App {
	app := NewApp(log, cfg, httpServer, rpcServer)
	return app
}

func ProvideLogger() *logger.Logger {
	loggerLogger := logger.NewLogger()
	return loggerLogger
}

func ProvideConfig() *config.Config {
	configConfig := config.NewConfig()
	return configConfig
}

func ProvideRpcServer(log *logrus.Logger, customerUsecase RpcServer.CustomerUsecase) *RpcServer.Server {
	server := RpcServer.NewServer(log, customerUsecase)
	return server
}

func ProvideCustomerHandler(baseHandler *handlers.BaseHandler, customerUsecase handlers.CustomerUsecase) *handlers.CustomerHandler {
	customerHandler := handlers.NewCustomerHandler(baseHandler, customerUsecase)
	return customerHandler
}

func ProvideCustomerUsecase(customerRepo usecases.CustomerRepository, projectRepo usecases.ProjectRepository, subsRepository usecases.SubsRepository) *usecases.CustomerUsecase {
	customerUsecase := usecases.NewCustomerUsecase(customerRepo, projectRepo, subsRepository)
	return customerUsecase
}

func ProvideCustomerRepo(db *gorm.DB) *pg.CustomerRepo {
	customerRepo := pg.NewCustomerRepo(db)
	return customerRepo
}

func ProvideFireCustomerRepo(client *firestore.Client) *fire.CustomerRepo {
	customerRepo := fire.NewCustomerRepo(client)
	return customerRepo
}

// wire.go:

func ProvideHttpServer(log *logrus.Logger, cfg *config.Config, customerHandler *handlers.CustomerHandler) *HttpServer.Server {
	return HttpServer.NewServer(log, cfg.AccessSecret, customerHandler)
}

func ProvideLogrusEntry(log *logger.Logger) *logrus.Entry {
	return logrus.NewEntry(log.Logger)
}

func ProvideLogrusLogger(log *logger.Logger) *logrus.Logger {
	return log.Logger
}

func ProvideGormPostgres(e *logrus.Entry, cfg *config.Config) *gorm.DB {
	db := GormPostgres.NewClient(e, cfg.PostgresDSN)
	if err := db.AutoMigrate(&pg.Customer{}); err != nil {
		panic(err)
	}
	return db
}

func ProvideBaseHandler(log *logrus.Logger, cfg *config.Config) *handlers.BaseHandler {
	return handlers.NewBaseHandler(log, cfg.Mode)
}

func ProvideSubsRepo(cfg *config.Config) *RpcRepo.SubsRepo {
	rpcClient := RpcClient.NewClient("tcp", cfg.SubsServiceRPCAddress)
	return RpcRepo.NewSubsRepo(rpcClient)
}

func ProvideProjectRepo(cfg *config.Config) *RpcRepo.ProjectRepo {
	rpcClient := RpcClient.NewClient("tcp", cfg.ProjectServiceRpcAddress)
	return RpcRepo.NewProjectRepo(rpcClient)
}

func ProvideFirestoreClient(cfg *config.Config) *firestore.Client {
	ctx := context.Background()
	client, err := firestore.NewClient(ctx, cfg.GcpProjectId)
	if err != nil {
		panic(err)
	}
	return client
}
